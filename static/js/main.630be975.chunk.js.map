{"version":3,"sources":["sortingAlgorithms/sortingAlgorithmsMerge.js","sortingAlgorithms/sortingAlgorithmsInsertion.js","SortingVisualizer/SortingVisualizer.jsx","navbar.jsx","App.js","reportWebVitals.js","index.js"],"names":["run","getMergeSortAnimations","array","animations","length","auxiliaryArray","slice","mergeSortHelper","console","log","mainArray","startIdx","endIdx","middleIdx","Math","floor","doMerge","k","i","j","push","getInsertionSortAnimations","inputArr","n","current","insertionSort","PRIMARY_COLOR","SortingVisualizer","props","state","array2","ANIMATION_SPEED_MS","NUMBER_OF_ARRAY_BARS","handleChange","bind","handleChange2","event","this","setState","target","value","resetArray","min","max","temp","random","arrayBars","document","getElementsByClassName","setTimeout","barOneIdx","newHeight","style","height","animations2","arrayBars2","barOneIdx2","newHeight1","output","alert","className","map","idx","backgroundColor","value2","idx2","id","for","type","name","placeholder","onChange","required","onClick","Sort","test","React","Component","Navbar","href","App","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","getElementById"],"mappings":"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","file":"static/js/main.630be975.chunk.js","sourcesContent":["let run = 0;\nexport function getMergeSortAnimations(array) {\n  const animations = [];\n  run = 0;\n  if (array.length <= 1) return array;\n  const auxiliaryArray = array.slice();\n  mergeSortHelper(array, 0, array.length - 1, auxiliaryArray, animations);\n  console.log(run);\n  return animations;\n \n}\n\nfunction mergeSortHelper(\n  mainArray,\n  startIdx,\n  endIdx,\n  auxiliaryArray,\n  animations,\n  run\n) {\n  if (startIdx === endIdx) return;\n  const middleIdx = Math.floor((startIdx + endIdx) / 2);\n  mergeSortHelper(auxiliaryArray, startIdx, middleIdx, mainArray, animations);\n  mergeSortHelper(auxiliaryArray, middleIdx + 1, endIdx, mainArray, animations);\n  doMerge(mainArray, startIdx, middleIdx, endIdx, auxiliaryArray, animations);\n}\nfunction doMerge(\n  mainArray,\n  startIdx,\n  middleIdx,\n  endIdx,\n  auxiliaryArray,\n  animations\n) {\n  let k = startIdx;\n  let i = startIdx;\n  let j = middleIdx + 1;\n  while (i <= middleIdx && j <= endIdx) {\n    //animations.push([i, j]);\n    //animations.push([i, j]);\n    if (auxiliaryArray[i] <= auxiliaryArray[j]) {\n      animations.push([k, auxiliaryArray[i]]);\n      mainArray[k++] = auxiliaryArray[i++];\n      \n    } else {\n      animations.push([k, auxiliaryArray[j]]);\n      mainArray[k++] = auxiliaryArray[j++];\n    }\n    run++;\n  }\n  while (i <= middleIdx) {\n    //animations.push([i, i]);\n    //animations.push([i, i]);\n    animations.push([k, auxiliaryArray[i]]);\n    mainArray[k++] = auxiliaryArray[i++];\n    run++;\n  }\n  while (j <= endIdx) {\n   // animations.push([j, j]);\n    //animations.push([j, j]);\n    animations.push([k, auxiliaryArray[j]]);\n    mainArray[k++] = auxiliaryArray[j++];\n    run++;\n  }\n}\n","export function getInsertionSortAnimations(array) {\r\n    const animations = [];\r\n    if (array.length <= 1) return array;\r\n    insertionSort(array,animations) ;\r\n    return animations;\r\n}\r\n\r\nfunction insertionSort(inputArr,animations) {\r\n    let n = inputArr.length;\r\n\r\n        for (let i = 1; i < n; i++) {\r\n            // Choosing the first element in our unsorted subarray\r\n            let current = inputArr[i];\r\n            // The last element of our sorted subarray\r\n            let j = i-1; \r\n\r\n            while ((j > -1) && (current < inputArr[j])) {\r\n                animations.push([j+1,inputArr[j]]);\r\n                //animations.push([j+1,j,inputArr[j+1],inputArr[j]]);\r\n                inputArr[j+1] = inputArr[j];\r\n                j--;\r\n            }\r\n            animations.push([j+1,current]);\r\n            inputArr[j+1] = current;\r\n            \r\n\r\n            if (i === n - 1){\r\n                console.log(\"end\");\r\n            }else{\r\n                //animations.push([j+1,i,inputArr[j+1],current]);\r\n            }\r\n        }\r\n        console.log(animations);\r\n    return animations;\r\n}","import React from \"react\";\nimport { getMergeSortAnimations } from \"../sortingAlgorithms/sortingAlgorithmsMerge.js\";\nimport { getInsertionSortAnimations } from \"../sortingAlgorithms/sortingAlgorithmsInsertion.js\";\nimport \"./SortingVisualizer.css\";\n\n\n\n// This is the main color of the array bars.\nconst PRIMARY_COLOR = \"turquoise\";\n\nexport default class SortingVisualizer extends React.Component {\n  constructor(props) {\n    super(props);\n\n    this.state = {\n      array: [],\n      array2: [],\n      ANIMATION_SPEED_MS : 5,\n      NUMBER_OF_ARRAY_BARS : 100\n    };\n      this.handleChange = this.handleChange.bind(this);\n      this.handleChange2 = this.handleChange2.bind(this);\n  }\n  handleChange(event) {\n    this.setState({ANIMATION_SPEED_MS : event.target.value});\n  }\n  handleChange2(event) {\n    this.setState({NUMBER_OF_ARRAY_BARS : event.target.value});\n  }\n  componentDidMount() {\n    this.resetArray();\n  }\n\n  resetArray() {\n    const array = [];\n    const array2 = [];\n    for (let i = 0; i < this.state.NUMBER_OF_ARRAY_BARS; i++) {\n      let temp = randomIntFromInterval(5, 500);\n      array.push(temp);\n      array2.push(temp);\n    }\n    this.setState({ array });\n    this.setState({ array2 });\n    \n    \n  }\n\n  Sort() {\n    const animations = getMergeSortAnimations(this.state.array);\n    var n = 0;\n    for (let i = 0; i < animations.length; i++) {\n      const arrayBars = document.getElementsByClassName(\"array-bar\");\n        n = n+1;\n        setTimeout(() => {\n          const [barOneIdx, newHeight] = animations[i];\n          const barOneStyle = arrayBars[barOneIdx].style;\n          barOneStyle.height = `${newHeight}px`;\n        },i*this.state.ANIMATION_SPEED_MS);\n    \n    }   \n    const animations2 = getInsertionSortAnimations(this.state.array2);\n    for (let i = 0; i < animations2.length; i++) {\n      const arrayBars2 = document.getElementsByClassName(\"array-bar2\");\n     \n      setTimeout(() => {\n          const [barOneIdx2, newHeight1] = animations2[i];\n          const barOneStyle2 = arrayBars2[barOneIdx2].style;\n          barOneStyle2.height = `${newHeight1}px`;\n        },i*this.state.ANIMATION_SPEED_MS);\n      }\n    \n    } \n    \n    \n      \n\n  test(){\n    const arrayBars2 = document.getElementsByClassName(\"array-bar2\");\n    const arrayBars = document.getElementsByClassName(\"array-bar\");\n    let output = true;\n    for (let i= 0;i<arrayBars2.length;i++){\n        if(arrayBars2[i].style.height !== arrayBars[i].style.height){\n          output = false;\n        }\n    }\n    alert('Array 1 and array 2 are equal : ' + output);\n    console.log(output);\n  };\n\n\n\n  render() {\n    \n    const { array2 } = this.state;\n    const { array } = this.state;\n    return (\n\n      <div className=\"array-container\">\n        <p className=\"sort_name\">Merge Sort</p>\n       <div>\n        {array.map((value, idx) => (\n          <div\n            className=\"array-bar\"\n            key={idx}\n            style={{\n              backgroundColor: PRIMARY_COLOR,\n              height: `${value}px`,\n            }}\n          ></div>\n        ))}\n      </div>\n      <p className=\"sort_name\">Insertion Sort</p>\n       <div>\n         \n        {array2.map((value2, idx2) => (\n          <div\n            className=\"array-bar2\"\n            key={idx2}\n            style={{\n              backgroundColor: PRIMARY_COLOR,\n              height: `${value2}px`,\n            }}\n          ></div>\n     \n        ))}\n        </div>\n        <form>\n              <div className = \"form_class\">\n              <label id=\"name-label\" for=\"name\">Sort Speed</label>\n                <input \n                  type=\"number\"\n                  name=\"name\"\n                  id=\"name\"\n                  placeholder=\"  Enter your name\"\n                  value = {this.state.ANIMATION_SPEED_MS} onChange={this.handleChange}\n                  />\n              </div>\n              <div className = \"form_class\">\n                <label id=\"name-label\" for=\"name\">Array Size</label>\n                <input \n                  type=\"number\"\n                  name=\"name\"\n                  id=\"name\"\n                  placeholder=\"  Enter your name\"\n                  value = {this.state.NUMBER_OF_ARRAY_BARS} onChange={this.handleChange2}\n                  required/>\n              </div>                \n          \n        </form>\n\n        <div> \n        <button className = \"button\" onClick={() => this.resetArray()}>Generate New Array</button>\n        <button className = \"button\" onClick={() => this.Sort()}>Sort</button>\n        <button className = \"button\" onClick={() => this.test()}>Check</button>\n        </div>\n      </div>\n      \n    );\n  }\n}\n\nfunction randomIntFromInterval(min, max) {\n  return Math.floor(Math.random() * (max - min + 1) + min);\n}","import React, { Component } from \"react\";\r\nimport \"./navbar.css\";\r\n\r\nclass Navbar extends Component {\r\n  render() {\r\n    return (\r\n      <nav className=\"navbar\">\r\n        <a href=\"#calculator\" id=\"logo\">\r\n          <big>\r\n            <bold id=\"title\">Insertion & Merge Sort Visualizer</bold>\r\n          </big>\r\n        </a>\r\n\r\n        <div id=\"divider\"></div>\r\n        <ul className=\"nav_links\">\r\n          <li>\r\n            <a> By     : Indra Wirananta &  Raka Mahendra</a>\r\n          </li>\r\n        </ul>\r\n        <button id=\"hamburger\">\r\n          <div className=\"hamburger-line\" />\r\n          <div className=\"hamburger-line\" />\r\n          <div className=\"hamburger-line\" />\r\n        </button>\r\n      </nav>\r\n    );\r\n  }\r\n}\r\nexport default Navbar;\r\n","import React from \"react\";\nimport SortingVisualizer from \"./SortingVisualizer/SortingVisualizer\";\nimport Navbar from \"./navbar.jsx\";\nimport \"./App.css\";\n\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <Navbar/>\n      <SortingVisualizer></SortingVisualizer>\n    </div>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}